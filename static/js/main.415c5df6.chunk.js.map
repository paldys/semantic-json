{"version":3,"sources":["components/ManualInput.tsx","components/DisplayDifference.tsx","utils.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SingleInput","onChange","className","e","target","value","ManualInput","onCompare","useState","inputLeft","setInputLeft","inputRight","setInputRight","onClick","INDENTATION_IN_SPACES","_","range","map","join","addIndentation","s","DisplayError","failedCompare","leftMessage","rightMessage","stringifyWithIndentation","v","indentation","JSON","stringify","replaceAll","DisplayLeftValue","prefix","suffix","DisplayRightValue","DisplayBothValue","DisplayArrayValue","collapse","isSame","array","collapsed","setCollapsed","fullPrefix","length","clsx","differ","i","type","DisplayObjectValue","key","DisplayDifference","comparator","status","result","both","left","right","safeJsonParse","json","parse","error","SyntaxError","message","JSON_VALUE_PRIMITIVE_TYPES_INFERED","addType","isArray","isPlainObject","Error","isPrimitiveType","includes","toLeftRightValues","a","compareArrays","leftArray","rightArray","values","leftTypedValue","rightTypedValue","c","compareValues","slice","toLeftRightKeyValues","compareKeyArrays","leftKeyArray","rightKeyArray","leftKey","leftValue","rightKey","rightValue","compareObjects","leftObject","rightObject","sortBy","toPairs","k","typedLeftJson","typedRightJson","App","setComparator","leftParsed","rightParsed","undefined","leftJson","rightJson","compareJsons","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAOMA,G,MAAc,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OAClB,qBAAKC,UAAU,cAAf,SACE,0BAAUA,UAAU,WAAWD,SAAU,SAACE,GAAD,OAAOF,EAASE,EAAEC,OAAOC,cA2BvDC,EAnBK,SAAC,GAAuD,IAAtDC,EAAqD,EAArDA,UAAqD,EACvCC,mBAAS,IAD8B,mBAClEC,EADkE,KACvDC,EADuD,OAErCF,mBAAS,IAF4B,mBAElEG,EAFkE,KAEtDC,EAFsD,KAIzE,OACE,sBAAKV,UAAU,cAAf,UACE,sBAAKA,UAAU,SAAf,UACE,cAAC,EAAD,CAAaD,SAAUS,IACvB,cAAC,EAAD,CAAaT,SAAUW,OAEzB,qBAAKV,UAAU,SAAf,SACE,qBAAKA,UAAU,UAAUW,QAAS,kBAAMN,EAAUE,EAAWE,IAA7D,2B,uBCrBFG,G,MAAwBC,IAAEC,MADP,GAC+BC,KAAI,iBAAM,OAAKC,KAAK,KAEtEC,EAAiB,eAACC,EAAD,uDAAK,GAAL,gBAAuBN,GAAvB,OAA+CM,IAMhEC,EAAe,SAAC,GAAD,QAAEC,cAAgBC,EAAlB,EAAkBA,YAAaC,EAA/B,EAA+BA,aAA/B,OACnB,sBAAKtB,UAAU,iCAAf,UACGqB,GAAe,+DAAkCA,KACjDC,GAAgB,gEAAmCA,SAUlDC,EAA2B,SAACC,GAAD,IAAaC,EAAb,uDAA2B,GAA3B,OAC/BC,KAAKC,UAAUH,EAAG,KAvBK,GAuBmBI,WAAW,KAArD,YAAgEH,KAE5DI,EAAmB,SAAC,GAAD,QAAEJ,mBAAF,MAAgB,GAAhB,EAAoBK,EAApB,EAAoBA,OAAQC,EAA5B,EAA4BA,OAAQ5B,EAApC,EAAoCA,MAApC,OACvB,qBAAKH,UAAU,mBAAf,SACE,gCAAMyB,EAAaK,EAAM,UAAMJ,KAAKC,UAAUG,GAArB,MAAmC,GAAIP,EAAyBpB,EAAOsB,GAAcM,QAI5GC,EAAoB,SAAC,GAAD,QAAEP,mBAAF,MAAgB,GAAhB,EAAoBK,EAApB,EAAoBA,OAAQC,EAA5B,EAA4BA,OAAQ5B,EAApC,EAAoCA,MAApC,OACxB,qBAAKH,UAAU,oBAAf,SACE,gCAAMyB,EAAaK,EAAM,UAAMJ,KAAKC,UAAUG,GAArB,MAAmC,GAAIP,EAAyBpB,EAAOsB,GAAcM,QAI5GE,EAAmB,SAAC,GAAD,QAAER,mBAAF,MAAgB,GAAhB,EAAoBK,EAApB,EAAoBA,OAAQC,EAA5B,EAA4BA,OAAQ5B,EAApC,EAAoCA,MAApC,OACvB,qBAAKH,UAAU,mBAAf,SACE,gCAAMyB,EAAaK,EAAM,UAAMJ,KAAKC,UAAUG,GAArB,MAAmC,GAAIP,EAAyBpB,EAAOsB,GAAcM,QAI5GG,EAAoB,SAApBA,EAAqB,GAA2J,IAAD,IAAzJT,mBAAyJ,MAA3I,GAA2I,EAAvIK,EAAuI,EAAvIA,OAAQC,EAA+H,EAA/HA,OAA+H,IAAvHI,gBAAuH,aAAtGhC,MAAQiC,EAA8F,EAA9FA,OAAQC,EAAsF,EAAtFA,MAAsF,EACjJ/B,mBAAS6B,GADwI,mBAC5KG,EAD4K,KACjKC,EADiK,KAG7KC,EAAU,UAAMf,GAAN,OAAoBK,EAAM,UAAMJ,KAAKC,UAAUG,GAArB,MAAmC,IAE7E,OAAqB,IAAjBO,EAAMI,OAAqB,qBAAKzC,UAAU,oBAAf,SAAmC,gCAAMwC,EAAN,KAAoBT,OAClFO,EAAkB,qBAAKtC,UAAW0C,YAAK,wBAAyB,CAACC,QAASP,IAAUzB,QAAS,kBAAM4B,GAAa,IAA9F,SAAsG,gCAAMC,EAAN,QAAuBT,OAGjJ,sBAAK/B,UAAU,oBAAf,UACE,gCAAMwC,EAAN,OACCH,EAAMtB,KAAI,SAACd,EAAG2C,GACb,IAAMb,EAASa,EAAIP,EAAMI,OAAS,EAAI,IAAM,GAC5C,OAAQxC,EAAE4C,MACR,IAAK,OACH,OAAO,cAAC,EAAD,CAAkBpB,YAAaR,EAAeQ,GAActB,MAAOF,EAAEE,MAAO4B,OAAQA,IAC7F,IAAK,QACH,OAAO,cAAC,EAAD,CAAmBN,YAAaR,EAAeQ,GAActB,MAAOF,EAAEE,MAAO4B,OAAQA,IAC9F,IAAK,OACH,OAAO,cAAC,EAAD,CAAkBN,YAAaR,EAAeQ,GAActB,MAAOF,EAAEE,MAAO4B,OAAQA,IAC7F,IAAK,UACH,MAAwB,UAAjB9B,EAAEE,MAAM0C,KACX,cAACX,EAAD,CAAmBT,YAAaR,EAAeQ,GAActB,MAAOF,EAAEE,MAAO4B,OAAQA,IACrF,cAAC,EAAD,CAAoBN,YAAaR,EAAeQ,GAActB,MAAOF,EAAEE,MAAO4B,OAAQA,QAGhG,gCAAMN,EAAN,IAAoBM,SAKpBe,EAAqB,SAArBA,EAAsB,GAA4J,IAAD,IAA1JrB,mBAA0J,MAA5I,GAA4I,EAAxIK,EAAwI,EAAxIA,OAAQC,EAAgI,EAAhIA,OAAgI,IAAxHI,gBAAwH,aAAvGhC,MAAQiC,EAA+F,EAA/FA,OAAQC,EAAuF,EAAvFA,MAAuF,EACnJ/B,mBAAS6B,GAD0I,mBAC9KG,EAD8K,KACnKC,EADmK,KAG/KC,EAAU,UAAMf,GAAN,OAAoBK,EAAM,UAAMJ,KAAKC,UAAUG,GAArB,MAAmC,IAE7E,OAAqB,IAAjBO,EAAMI,OAAqB,qBAAKzC,UAAU,qBAAf,SAAoC,gCAAMwC,EAAY,KAAMT,OACvFO,EAAkB,qBAAKtC,UAAW0C,YAAK,wBAAyB,CAACC,QAASP,IAAUzB,QAAS,kBAAM4B,GAAa,IAA9F,SAAsG,gCAAMC,EAAY,IAAlB,MAA0B,IAAKT,OAG3J,sBAAK/B,UAAU,qBAAf,UACE,gCAAMwC,EAAY,OACjBH,EAAMtB,KAAI,SAACd,EAAG2C,GACb,IAAMb,EAASa,EAAIP,EAAMI,OAAS,EAAI,IAAM,GAC5C,OAAQxC,EAAE4C,MACR,IAAK,OACH,OAAO,cAAC,EAAD,CAAkBpB,YAAaR,EAAeQ,GAAcK,OAAQ7B,EAAE8C,IAAK5C,MAAOF,EAAEE,MAAO4B,OAAQA,IAC5G,IAAK,QACH,OAAO,cAAC,EAAD,CAAmBN,YAAaR,EAAeQ,GAAcK,OAAQ7B,EAAE8C,IAAK5C,MAAOF,EAAEE,MAAO4B,OAAQA,IAC7G,IAAK,OACH,OAAO,cAAC,EAAD,CAAkBN,YAAaR,EAAeQ,GAAcK,OAAQ7B,EAAE8C,IAAK5C,MAAOF,EAAEE,MAAO4B,OAAQA,IAC5G,IAAK,UACH,MAAwB,UAAjB9B,EAAEE,MAAM0C,KACX,cAAC,EAAD,CAAmBpB,YAAaR,EAAeQ,GAAcK,OAAQ7B,EAAE8C,IAAK5C,MAAOF,EAAEE,MAAO4B,OAAQA,IACpG,cAACe,EAAD,CAAoBrB,YAAaR,EAAeQ,GAAcK,OAAQ7B,EAAE8C,IAAK5C,MAAOF,EAAEE,MAAO4B,OAAQA,QAG/G,gCAAMN,EAAa,IAAKM,SAsBbiB,EAjBW,SAAC,GAA8D,IAA7DC,EAA4D,EAA5DA,WAC1B,GAA0B,UAAtBA,EAAWC,OAAoB,OAAO,cAAC,EAAD,CAAc9B,cAAe6B,IADe,IAE/EE,EAAUF,EAAVE,OACP,MAAoB,SAAhBA,EAAON,KAAwB,cAAC,EAAD,CAAkB1C,MAAOgD,EAAOC,KAAKjD,QACpD,WAAhBgD,EAAON,KACT,qCACE,cAAC,EAAD,CAAkB1C,MAAOgD,EAAOE,KAAKlD,QACrC,cAAC,EAAD,CAAmBA,MAAOgD,EAAOG,MAAMnD,WAGvB,UAAhBgD,EAAON,KAAyB,cAAC,EAAD,CAAmB1C,MAAOgD,EAAQhB,UAAU,IAC5D,WAAhBgB,EAAON,KAA0B,cAAC,EAAD,CAAoB1C,MAAOgD,EAAQhB,UAAU,IAEhF,8BAAMT,KAAKC,UAAUsB,EAAY,KAAM,M,cChH9BM,EAAgB,SAACrC,GAC5B,IAEE,MAAO,CAACgC,OAAQ,KAAMM,KADT9B,KAAK+B,MAAMvC,IAExB,MAAOwC,GACP,GAAIA,aAAiBC,YACnB,MAAO,CAACT,OAAQ,QAASU,QAASF,EAAME,SAE1C,MAAMF,IAkFJG,EAHa,sCAAIrC,EAAJ,yBAAIA,EAAJ,uBAA8BA,GAGI,WAAV,EADR,CAAC,SAAU,SAAU,UAAW,SAoC7DsC,EAAU,SAAC3D,GACf,GAAc,OAAVA,EAAgB,MAAO,CAAC0C,KAAM,OAAQ1C,MAAO,MACjD,GAAqB,kBAAVA,EAAoB,MAAO,CAAC0C,KAAM,SAAU1C,SACvD,GAAqB,kBAAVA,EAAoB,MAAO,CAAC0C,KAAM,SAAU1C,SACvD,GAAqB,mBAAVA,EAAqB,MAAO,CAAC0C,KAAM,UAAW1C,SACzD,GAAIU,IAAEkD,QAAQ5D,GAAQ,MAAO,CAAC0C,KAAM,QAAS1C,SAC7C,GAAIU,IAAEmD,cAAc7D,GAAQ,MAAO,CAAC0C,KAAM,SAAU1C,MAAOA,GAC3D,MAAM8D,MAAM,uBAGRC,EAAkB,SAAC1C,GAAD,OACtBqC,EAAmCM,SAAS3C,EAAEqB,OAE1CuB,EAAoB,SAACC,EAAcxB,GAAf,OACvBwB,EAAEtD,KAAI,SAACZ,GAAD,MAAY,CAAC0C,OAAM1C,aAEtBmE,EAAgB,SAAhBA,EAAiBC,EAAsBC,GAAsF,IAA/DpC,IAA8D,yDAA/CqC,EAA+C,uDAAlB,GAC9G,GAAyB,IAArBF,EAAU9B,OACZ,MAAO,CACLI,KAAM,QACNT,OAAQA,GAAgC,IAAtBoC,EAAW/B,OAC7BJ,MAAM,GAAD,mBAAMoC,GAAN,YAAiBL,EAAkBI,EAAY,YAIxD,GAA0B,IAAtBA,EAAW/B,OACb,MAAO,CACLI,KAAM,QACNT,QAAQ,EACRC,MAAM,GAAD,mBAAMoC,GAAN,YAAiBL,EAAkBG,EAAW,WAIvD,IAAMG,EAAiBZ,EAAQS,EAAU,IACnCI,EAAkBb,EAAQU,EAAW,IAErCI,EAAIC,EAAcH,EAAgBC,GAExC,OAAQC,EAAE/B,MACR,IAAK,OACH,OAAOyB,EAAcC,EAAUO,MAAM,GAAIN,EAAWM,MAAM,GAAI1C,EAA1C,sBAAsDqC,GAAtD,CAA8DG,EAAExB,QACtF,IAAK,SACH,OAAOkB,EAAcC,EAAUO,MAAM,GAAIN,GAAY,EAAjC,sBAA4CC,GAA5C,CAAoDG,EAAEvB,QAC5E,IAAK,QACL,IAAK,SACH,OAAOiB,EAAcC,EAAUO,MAAM,GAAIN,EAAWM,MAAM,GAAI1C,GAAUwC,EAAExC,OAAtD,sBAAkEqC,GAAlE,CAA0E,CAAC5B,KAAM,UAAW1C,MAAOyE,QAIvHG,EAAuB,SAACV,EAA6BxB,GAA9B,OAC1BwB,EAAEtD,KAAI,mCAAEgC,EAAF,KAAO5C,EAAP,WAAmB,CAAC0C,OAAME,MAAK5C,aAElC6E,EAAmB,SAAnBA,EAAoBC,EAAwCC,GAA0G,IAAjE9C,IAAgE,yDAAjDqC,EAAiD,uDAAnB,GACtJ,GAA4B,IAAxBQ,EAAaxC,OACf,MAAO,CACLI,KAAM,SACNT,OAAQA,GAAmC,IAAzB8C,EAAczC,OAChCJ,MAAM,GAAD,mBAAMoC,GAAN,YAAiBM,EAAqBG,EAAe,YAI9D,GAA6B,IAAzBA,EAAczC,OAChB,MAAO,CACLI,KAAM,SACNT,QAAQ,EACRC,MAAM,GAAD,mBAAMoC,GAAN,YAAiBM,EAAqBE,EAAc,WAb4G,kBAiB5IA,EAAa,GAjB+H,GAiBlKE,EAjBkK,KAiBzJC,EAjByJ,mBAkB1IF,EAAc,GAlB4H,GAkBlKG,EAlBkK,KAkBxJC,EAlBwJ,KAoBzK,GAAIH,IAAYE,EACd,OAAOL,EAAiBC,EAAaH,MAAM,GAAII,GAAe,EAAvC,sBAAkDT,GAAlD,CAA0D,CAAE5B,KAAM,OAAQE,IAAKoC,EAAShF,MAAOiF,MAGxH,IAAMV,EAAiBZ,EAAQsB,GACzBT,EAAkBb,EAAQwB,GAE1BV,EAAIC,EAAcH,EAAgBC,GAExC,OAAQC,EAAE/B,MACR,IAAK,OACH,OAAOmC,EAAiBC,EAAaH,MAAM,GAAII,EAAcJ,MAAM,GAAI1C,EAAhD,sBAA4DqC,GAA5D,cAAqE1B,IAAKoC,GAAYP,EAAExB,SACjH,IAAK,SACH,OAAO4B,EAAiBC,EAAaH,MAAM,GAAII,GAAe,EAAvC,sBAAkDT,GAAlD,cAA2D1B,IAAKoC,GAAYP,EAAEvB,SACvG,IAAK,QACL,IAAK,SACH,OAAO2B,EAAiBC,EAAaH,MAAM,GAAII,EAAcJ,MAAM,GAAI1C,GAAUwC,EAAExC,OAA5D,sBAAwEqC,GAAxE,CAAgF,CAAE5B,KAAM,UAAWE,IAAKoC,EAAShF,MAAOyE,QAI/IW,EAAiB,SAACC,EAAqCC,GAC3D,IAAMR,EAAepE,IAAE6E,OAAO7E,IAAE8E,QAAQH,IAAa,mCAAEI,EAAF,iBAAYA,KAC3DV,EAAgBrE,IAAE6E,OAAO7E,IAAE8E,QAAQF,IAAc,mCAAEG,EAAF,iBAAYA,KAEnE,OAAOZ,EAAiBC,EAAcC,IAGlCL,EAAgB,SAACgB,EAA6BC,GAClD,GAAID,EAAchD,OAASiD,EAAejD,KAAM,CAC9C,GAAIqB,EAAgB2B,GAClB,OAAIA,EAAc1F,QAAU2F,EAAe3F,MAClC,CACL0C,KAAM,OACNO,KAAM,CACJP,KAAM,OACN1C,MAAO0F,EAAc1F,QAIlB,CACL0C,KAAM,SACNQ,KAAM,CACJR,KAAM,OACN1C,MAAO0F,EAAc1F,OAEvBmD,MAAO,CACLT,KAAM,QACN1C,MAAO2F,EAAe3F,QAM9B,GAA2B,UAAvB0F,EAAchD,MAA4C,UAAxBiD,EAAejD,KACnD,OAAOyB,EAAcuB,EAAc1F,MAAO2F,EAAe3F,OAG3D,GAA2B,WAAvB0F,EAAchD,MAA6C,WAAxBiD,EAAejD,KACpD,OAAO0C,EAAeM,EAAc1F,MAAO2F,EAAe3F,OAI9D,MAAO,CACL0C,KAAM,SACNQ,KAAM,CACJR,KAAM,OACN1C,MAAO0F,EAAc1F,OAEvBmD,MAAO,CACLT,KAAM,QACN1C,MAAO2F,EAAe3F,SCnQb4F,G,MAdH,WAA2B,IAAD,EACAzF,qBADA,mBAC7B2C,EAD6B,KACjB+C,EADiB,KAGpC,OACE,sBAAKhG,UAAU,MAAf,UACE,uDACA,cAAC,EAAD,CACEK,UAAW,SAACgD,EAAMC,GAAP,OAAiB0C,ED+QR,SAAC3C,EAAcC,GACzC,IAAM2C,EAAa1C,EAAcF,GAC3B6C,EAAc3C,EAAcD,GAElC,GAA0B,UAAtB2C,EAAW/C,QAA6C,UAAvBgD,EAAYhD,OAC/C,MAAO,CACLA,OAAQ,QACRG,OACAC,QACAjC,YAAmC,UAAtB4E,EAAW/C,OAAqB+C,EAAWrC,aAAUuC,EAClE7E,aAAqC,UAAvB4E,EAAYhD,OAAqBgD,EAAYtC,aAAUuC,GAIzE,IAAMC,EAAWH,EAAWzC,KACtB6C,EAAYH,EAAY1C,KAE9B,MAAO,CACLN,OAAQ,KACRkD,WACAC,YACAlD,OAAQ0B,EAAcf,EAAQsC,GAAWtC,EAAQuC,KCpSHC,CAAajD,EAAMC,OAE9DL,GAAc,cAAC,EAAD,CAAmBA,WAAYA,SCDrCsD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAgD,IAA9CC,EAA6C,EAA7CA,OAAQC,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,QAC1DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.415c5df6.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport './ManualInput.scss'\n\ninterface SingleInputPrefs {\n  onChange: (newValue: string) => void\n}\n\nconst SingleInput = ({onChange}: SingleInputPrefs): React.ReactElement => (\n  <div className=\"SingleInput\">\n    <textarea className=\"textarea\" onChange={(e) => onChange(e.target.value)} />\n  </div>\n)\n\ninterface ManualInputPrefs {\n  onCompare: (left: string, right: string) => void\n}\n\nconst ManualInput = ({onCompare}: ManualInputPrefs): React.ReactElement => {\n  const [inputLeft, setInputLeft] = useState('')\n  const [inputRight, setInputRight] = useState('')\n\n  return (\n    <div className=\"ManualInput\">\n      <div className=\"inputs\">\n        <SingleInput onChange={setInputLeft} />\n        <SingleInput onChange={setInputRight} />\n      </div>\n      <div className=\"action\">\n        <div className=\"compare\" onClick={() => onCompare(inputLeft, inputRight)}>\n          Compare\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ManualInput\n","import React, { useState } from 'react'\r\nimport _ from 'lodash'\r\nimport clsx from 'clsx'\r\nimport {compareJsons, FailedCompare, JsonArray, JsonObject} from '../utils'\r\nimport './DisplayDifference.scss'\r\n\r\nconst INDENTATION_SIZE = 2 as const\r\nconst INDENTATION_IN_SPACES = _.range(INDENTATION_SIZE).map(() => ' ').join('')\r\n\r\nconst addIndentation = (s = ''): string => `${INDENTATION_IN_SPACES}${s}`\r\n\r\ninterface DisplayDifferencePrefs {\r\n  comparator: ReturnType<typeof compareJsons>\r\n}\r\n\r\nconst DisplayError = ({failedCompare: {leftMessage, rightMessage}}: {failedCompare: FailedCompare}): React.ReactElement => (\r\n  <div className=\"DisplayDifference DisplayError\">\r\n    {leftMessage && <pre>Could not parse left input: {leftMessage}</pre>}\r\n    {rightMessage && <pre>Could not parse right input: {rightMessage}</pre>}\r\n  </div>\r\n)\r\n\r\ninterface PrefixValue {\r\n  prefix?: string\r\n  indentation?: string\r\n  suffix?: string\r\n}\r\n\r\nconst stringifyWithIndentation = (v: unknown, indentation = ''): string =>\r\n  JSON.stringify(v, null, INDENTATION_SIZE).replaceAll('\\n', `\\n${indentation}`)\r\n\r\nconst DisplayLeftValue = ({indentation = '', prefix, suffix, value}: {value: unknown} & PrefixValue): React.ReactElement => (\r\n  <div className=\"DisplayLeftValue\">\r\n    <pre>{indentation}{prefix ? `${JSON.stringify(prefix)}: ` : ''}{stringifyWithIndentation(value, indentation)}{suffix}</pre>\r\n  </div>\r\n)\r\n\r\nconst DisplayRightValue = ({indentation = '', prefix, suffix, value}: {value: unknown} & PrefixValue): React.ReactElement => (\r\n  <div className=\"DisplayRightValue\">\r\n    <pre>{indentation}{prefix ? `${JSON.stringify(prefix)}: ` : ''}{stringifyWithIndentation(value, indentation)}{suffix}</pre>\r\n  </div>\r\n)\r\n\r\nconst DisplayBothValue = ({indentation = '', prefix, suffix, value}: {value: unknown} & PrefixValue): React.ReactElement => (\r\n  <div className=\"DisplayBothValue\">\r\n    <pre>{indentation}{prefix ? `${JSON.stringify(prefix)}: ` : ''}{stringifyWithIndentation(value, indentation)}{suffix}</pre>\r\n  </div>\r\n)\r\n\r\nconst DisplayArrayValue = ({indentation = '', prefix, suffix, collapse = true, value: {isSame, array}}: {value: JsonArray, collapse?: boolean} & PrefixValue): React.ReactElement => {\r\n  const [collapsed, setCollapsed] = useState(collapse)\r\n  \r\n  const fullPrefix = `${indentation}${prefix ? `${JSON.stringify(prefix)}: ` : ''}`\r\n\r\n  if (array.length === 0) return <div className=\"DisplayArrayValue\"><pre>{fullPrefix}[]{suffix}</pre></div>\r\n  if (collapsed) return <div className={clsx(\"DisplayCollapsedValue\", {differ: !isSame})} onClick={() => setCollapsed(false)}><pre>{fullPrefix}[...]{suffix}</pre></div>\r\n\r\n  return (\r\n    <div className=\"DisplayArrayValue\">\r\n      <pre>{fullPrefix}[</pre>\r\n      {array.map((e, i) => {\r\n        const suffix = i < array.length - 1 ? ',' : ''\r\n        switch (e.type) {\r\n          case 'left':\r\n            return <DisplayLeftValue indentation={addIndentation(indentation)} value={e.value} suffix={suffix} />\r\n          case 'right':\r\n            return <DisplayRightValue indentation={addIndentation(indentation)} value={e.value} suffix={suffix} />\r\n          case 'both':\r\n            return <DisplayBothValue indentation={addIndentation(indentation)} value={e.value} suffix={suffix} />\r\n          case 'complex':\r\n            return e.value.type === 'array'\r\n              ? <DisplayArrayValue indentation={addIndentation(indentation)} value={e.value} suffix={suffix} />\r\n              : <DisplayObjectValue indentation={addIndentation(indentation)} value={e.value} suffix={suffix} />\r\n        }\r\n      })}\r\n      <pre>{indentation}]{suffix}</pre>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst DisplayObjectValue = ({indentation = '', prefix, suffix, collapse = true, value: {isSame, array}}: {value: JsonObject, collapse?: boolean} & PrefixValue): React.ReactElement => {\r\n  const [collapsed, setCollapsed] = useState(collapse)\r\n\r\n  const fullPrefix = `${indentation}${prefix ? `${JSON.stringify(prefix)}: ` : ''}`\r\n\r\n  if (array.length === 0) return <div className=\"DisplayObjectValue\"><pre>{fullPrefix}{'{}'}{suffix}</pre></div>\r\n  if (collapsed) return <div className={clsx(\"DisplayCollapsedValue\", {differ: !isSame})} onClick={() => setCollapsed(false)}><pre>{fullPrefix}{'{'}...{'}'}{suffix}</pre></div>\r\n\r\n  return (\r\n  <div className=\"DisplayObjectValue\">\r\n    <pre>{fullPrefix}{'{'}</pre>\r\n    {array.map((e, i) => {\r\n      const suffix = i < array.length - 1 ? ',' : ''\r\n      switch (e.type) {\r\n        case 'left':\r\n          return <DisplayLeftValue indentation={addIndentation(indentation)} prefix={e.key} value={e.value} suffix={suffix} />\r\n        case 'right':\r\n          return <DisplayRightValue indentation={addIndentation(indentation)} prefix={e.key} value={e.value} suffix={suffix} />\r\n        case 'both':\r\n          return <DisplayBothValue indentation={addIndentation(indentation)} prefix={e.key} value={e.value} suffix={suffix} />\r\n        case 'complex':\r\n          return e.value.type === 'array'\r\n            ? <DisplayArrayValue indentation={addIndentation(indentation)} prefix={e.key} value={e.value} suffix={suffix} />\r\n            : <DisplayObjectValue indentation={addIndentation(indentation)} prefix={e.key} value={e.value} suffix={suffix} />\r\n      }\r\n    })}\r\n    <pre>{indentation}{'}'}{suffix}</pre>\r\n  </div>\r\n)\r\n  }\r\n\r\nconst DisplayDifference = ({comparator}: DisplayDifferencePrefs): React.ReactElement => {\r\n  if (comparator.status === 'error') return <DisplayError failedCompare={comparator} />\r\n  const {result} = comparator\r\n  if (result.type === 'same') return <DisplayBothValue value={result.both.value} />\r\n  if (result.type === 'differ') return (\r\n    <>\r\n      <DisplayLeftValue value={result.left.value} />\r\n      <DisplayRightValue value={result.right.value} />\r\n    </>\r\n  )\r\n  if (result.type === 'array') return <DisplayArrayValue value={result} collapse={false} />\r\n  if (result.type === 'object') return <DisplayObjectValue value={result} collapse={false} />\r\n  return (\r\n    <pre>{JSON.stringify(comparator, null, 2)}</pre>\r\n  )\r\n}\r\n\r\nexport default DisplayDifference","import _ from 'lodash'\n\ninterface SuccessfulSafeJsonParse {\n  status: 'ok'\n  json: ReturnType<JSON['parse']>\n}\n\ninterface FailedSafeJsonParse {\n  status: 'error'\n  message: string\n}\n\nexport const safeJsonParse = (s: string): SuccessfulSafeJsonParse | FailedSafeJsonParse => {\n  try {\n    const json = JSON.parse(s)\n    return {status: 'ok', json}\n  } catch (error) {\n    if (error instanceof SyntaxError) {\n      return {status: 'error', message: error.message}\n    }\n    throw error\n  }\n}\n\n// TODO: remove todo\n\ninterface KeyValue {\n  key: string\n}\ninterface LeftValue {\n  type: 'left'\n  value: unknown\n}\n\ntype LeftKeyValue = LeftValue & KeyValue\n\ninterface BothValue {\n  type: 'both'\n  value: null | string | number | boolean | JsonArray | JsonObject\n}\n\ntype BothKeyValue = BothValue & KeyValue\n\ninterface RightValue {\n  type: 'right'\n  value: unknown\n}\n\ntype RightKeyValue = RightValue & KeyValue\n\ninterface ComplexValue {\n  type: 'complex'\n  value: JsonArray | JsonObject\n}\n\ntype ComplexKeyValue = ComplexValue & KeyValue\n\nexport interface JsonRootSame {\n  type: 'same'\n  both: BothValue\n}\n\nexport interface JsonRootDiffer {\n  type: 'differ'\n  left: LeftValue\n  right: RightValue\n}\n\nexport interface JsonArray {\n  type: 'array'\n  isSame: boolean\n  array: Array<LeftValue | BothValue | RightValue | ComplexValue>\n}\n\nexport interface JsonObject {\n  type: 'object'\n  isSame: boolean\n  array: Array<LeftKeyValue | BothKeyValue | RightKeyValue | ComplexKeyValue>\n}\n\ntype JsonRoot = JsonRootSame | JsonRootDiffer | JsonArray | JsonObject\n\nexport interface SuccessfulCompare {\n  status: 'ok'\n  leftJson: ReturnType<JSON['parse']>\n  rightJson: ReturnType<JSON['parse']>\n  result: JsonRoot\n}\n\nexport interface FailedCompare {\n  status: 'error'\n  left: string\n  right: string\n  leftMessage?: string\n  rightMessage?: string\n}\n\nexport type Compare = SuccessfulCompare | FailedCompare\n\nconst tupleArray = (...v: string[]): string[] => v \n\nconst JSON_VALUE_PRIMITIVE_TYPES = ['number', 'string', 'boolean', 'null'] as const\nconst JSON_VALUE_PRIMITIVE_TYPES_INFERED = tupleArray(...JSON_VALUE_PRIMITIVE_TYPES)\n// const JSON_VALUE_TYPES = ['array', 'object', ...JSON_VALUE_PRIMITIVE_TYPES] as const\n\ninterface JsonRawValueNull {\n  type: 'null'\n  value: null\n}\n\ninterface JsonRawValueString {\n  type: 'string'\n  value: string\n}\n\ninterface JsonRawValueNumber {\n  type: 'number'\n  value: number\n}\n\ninterface JsonRawValueBoolean {\n  type: 'boolean'\n  value: boolean\n}\n\ninterface JsonRawValueArray {\n  type: 'array'\n  value: unknown[]\n}\n\ninterface JsonRawValueObject {\n  type: 'object'\n  value: Record<string, unknown>\n}\n\ntype JsonRawValue = JsonRawValueNull | JsonRawValueString | JsonRawValueNumber | JsonRawValueBoolean | JsonRawValueArray | JsonRawValueObject\n\nconst addType = (value: unknown): JsonRawValue => {\n  if (value === null) return {type: 'null', value: null}\n  if (typeof value === 'number') return {type: 'number', value}\n  if (typeof value === 'string') return {type: 'string', value}\n  if (typeof value === 'boolean') return {type: 'boolean', value}\n  if (_.isArray(value)) return {type: 'array', value}\n  if (_.isPlainObject(value)) return {type: 'object', value: value as Record<string, unknown>}\n  throw Error('Unexpected type...')\n}\n\nconst isPrimitiveType = (v: JsonRawValue): v is JsonRawValueNull | JsonRawValueString | JsonRawValueNumber | JsonRawValueBoolean =>\n  JSON_VALUE_PRIMITIVE_TYPES_INFERED.includes(v.type)\n  \nconst toLeftRightValues = (a: unknown[], type: 'left' | 'right'): Array<LeftValue | RightValue> =>\n   a.map((value) => ({type, value}))\n\nconst compareArrays = (leftArray: unknown[], rightArray: unknown[], isSame = true, values: JsonArray['array'] = []): JsonArray => {\n  if (leftArray.length === 0) {\n    return {\n      type: 'array',\n      isSame: isSame && rightArray.length === 0,\n      array: [...values, ...toLeftRightValues(rightArray, 'right')]\n    }\n  }\n\n  if (rightArray.length === 0) {\n    return {\n      type: 'array',\n      isSame: false,\n      array: [...values, ...toLeftRightValues(leftArray, 'left')]\n    }\n  }\n\n  const leftTypedValue = addType(leftArray[0])\n  const rightTypedValue = addType(rightArray[0])\n\n  const c = compareValues(leftTypedValue, rightTypedValue)\n\n  switch (c.type) {\n    case 'same':\n      return compareArrays(leftArray.slice(1), rightArray.slice(1), isSame, [...values, c.both])\n    case 'differ':\n      return compareArrays(leftArray.slice(1), rightArray, false, [...values, c.left])\n    case 'array':\n    case 'object':\n      return compareArrays(leftArray.slice(1), rightArray.slice(1), isSame && c.isSame, [...values, {type: 'complex', value: c}])\n  }\n}\n\nconst toLeftRightKeyValues = (a: Array<[string, unknown]>, type: 'left' | 'right'): Array<LeftKeyValue | RightKeyValue> =>\n   a.map(([key, value]) => ({type, key, value}))\n\nconst compareKeyArrays = (leftKeyArray: Array<[string, unknown]>, rightKeyArray: Array<[string, unknown]>, isSame = true, values: JsonObject['array'] = []): JsonObject => {\n  if (leftKeyArray.length === 0) {\n    return {\n      type: 'object',\n      isSame: isSame && rightKeyArray.length === 0,\n      array: [...values, ...toLeftRightKeyValues(rightKeyArray, 'right')]\n    }\n  }\n\n  if (rightKeyArray.length === 0) {\n    return {\n      type: 'object',\n      isSame: false,\n      array: [...values, ...toLeftRightKeyValues(leftKeyArray, 'left')]\n    }\n  }\n\n  const [leftKey, leftValue] = leftKeyArray[0]\n  const [rightKey, rightValue] = rightKeyArray[0]\n\n  if (leftKey !== rightKey) {\n    return compareKeyArrays(leftKeyArray.slice(1), rightKeyArray, false, [...values, { type: 'left', key: leftKey, value: leftValue }])\n  }\n\n  const leftTypedValue = addType(leftValue)\n  const rightTypedValue = addType(rightValue)\n\n  const c = compareValues(leftTypedValue, rightTypedValue)\n\n  switch (c.type) {\n    case 'same':\n      return compareKeyArrays(leftKeyArray.slice(1), rightKeyArray.slice(1), isSame, [...values, {key: leftKey, ...c.both}])\n    case 'differ':\n      return compareKeyArrays(leftKeyArray.slice(1), rightKeyArray, false, [...values, {key: leftKey, ...c.left}])\n    case 'array':\n    case 'object':\n      return compareKeyArrays(leftKeyArray.slice(1), rightKeyArray.slice(1), isSame && c.isSame, [...values, { type: 'complex', key: leftKey, value: c }])\n  }\n}\n\nconst compareObjects = (leftObject: Record<string, unknown>, rightObject: Record<string, unknown>): JsonObject => {\n  const leftKeyArray = _.sortBy(_.toPairs(leftObject), ([k, _]) => k)\n  const rightKeyArray = _.sortBy(_.toPairs(rightObject), ([k, _]) => k)\n\n  return compareKeyArrays(leftKeyArray, rightKeyArray)\n}\n\nconst compareValues = (typedLeftJson: JsonRawValue, typedRightJson: JsonRawValue, _path: Array<string | number> = []): JsonRoot => {\n  if (typedLeftJson.type === typedRightJson.type) {\n    if (isPrimitiveType(typedLeftJson)) {\n      if (typedLeftJson.value === typedRightJson.value) {\n        return {\n          type: 'same',\n          both: {\n            type: 'both',\n            value: typedLeftJson.value\n          }\n        }\n      } else {\n        return {\n          type: 'differ',\n          left: {\n            type: 'left',\n            value: typedLeftJson.value,\n          },\n          right: {\n            type: 'right',\n            value: typedRightJson.value,\n          }\n        }\n      }\n    }\n\n    if (typedLeftJson.type === 'array' && typedRightJson.type === 'array') {\n      return compareArrays(typedLeftJson.value, typedRightJson.value)\n    }\n    \n    if (typedLeftJson.type === 'object' && typedRightJson.type === 'object') {\n      return compareObjects(typedLeftJson.value, typedRightJson.value)\n    }\n  }\n\n  return {\n    type: 'differ',\n    left: {\n      type: 'left',\n      value: typedLeftJson.value,\n    },\n    right: {\n      type: 'right',\n      value: typedRightJson.value,\n    }\n  }\n}\n\nexport const compareJsons = (left: string, right: string): Compare => {\n  const leftParsed = safeJsonParse(left)\n  const rightParsed = safeJsonParse(right)\n\n  if (leftParsed.status === 'error' || rightParsed.status === 'error') {\n    return {\n      status: 'error',\n      left,\n      right,\n      leftMessage: leftParsed.status === 'error' ? leftParsed.message : undefined,\n      rightMessage: rightParsed.status === 'error' ? rightParsed.message : undefined,\n    }\n  }\n\n  const leftJson = leftParsed.json\n  const rightJson = rightParsed.json\n\n  return {\n    status: 'ok',\n    leftJson,\n    rightJson,\n    result: compareValues(addType(leftJson), addType(rightJson)),\n  }\n}\n","import React, {useState} from 'react'\nimport ManualInput from './components/ManualInput'\nimport DisplayDifference from './components/DisplayDifference'\nimport {compareJsons} from './utils'\nimport './App.scss'\n\nconst App = (): React.ReactElement => {\n  const [comparator, setComparator] = useState<ReturnType<typeof compareJsons> | undefined>()\n\n  return (\n    <div className=\"App\">\n      <h1>Semantic JSON compare</h1>\n      <ManualInput\n        onCompare={(left, right) => setComparator(compareJsons(left, right))}\n      />\n      {comparator && <DisplayDifference comparator={comparator} />}\n    </div>\n  )\n}\n\nexport default App\n","import {ReportHandler} from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport './index.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}