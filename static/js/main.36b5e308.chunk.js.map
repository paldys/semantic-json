{"version":3,"sources":["components/ManualInput.tsx","utils.ts","components/DisplayDifference.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SingleInput","onChange","className","e","target","value","ManualInput","onCompare","useState","inputLeft","setInputLeft","inputRight","setInputRight","onClick","safeJsonParse","s","status","json","JSON","parse","error","SyntaxError","message","createBothValue","typedValue","comparedType","addKey","converter","key","createLeftValue","createRightValue","JSON_VALUE_PRIMITIVE_TYPES_INFERED","v","addRawType","type","_","isArray","isPlainObject","Error","isPrimitiveType","includes","arrayToComparedValues","array","map","convertToTypedValue","arrayToComparedKeyValues","k","getCompareArraysNextRightArray","rightArray","slice","compareArrays","leftArray","isSame","values","length","comparedValues","leftTypedValue","rightTypedValue","c","compareValues","firstComparedValue","nextRightArray","compareKeyedArrays","leftKeyedArray","rightKeyedArray","leftKey","leftValue","rightKey","rightValue","nextLeftKeyedArray","nextRightKeyedArray","thisValue","compareResult","cv","compareObjects","leftObject","rightObject","leftKeyArray","sortBy","toPairs","rightKeyArray","rawTypedValue","rawTypedLeftJson","rawTypedRightJson","typedArray","typedObject","expandLazyValue","typedRawValue","ENCLOSING_TAGS","object","INDENTATION_IN_SPACES","range","join","increaseIndentation","DisplayError","failedCompare","leftMessage","rightMessage","DisplaySimpleValue","indentation","prefix","suffix","stringify","DisplayComplexValue","collapse","isCollapsed","setCollapsed","startTag","endTag","prefixToUse","clsx","mixed","DisplayLazyValue","rest","DisplayComparedValue","comparedValue","getDisplayTypedValue","DisplayComparedValues","i","nextPrefix","nextSuffix","DisplayDifference","comparator","result","App","setComparator","left","right","leftParsed","rightParsed","undefined","leftJson","rightJson","compareJsons","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.36b5e308.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport './ManualInput.scss'\n\ninterface SingleInputPrefs {\n  onChange: (newValue: string) => void\n}\n\nconst SingleInput = ({onChange}: SingleInputPrefs): React.ReactElement => (\n  <div className=\"SingleInput\">\n    <textarea className=\"textarea\" onChange={(e) => onChange(e.target.value)} />\n  </div>\n)\n\ninterface ManualInputPrefs {\n  onCompare: (left: string, right: string) => void\n}\n\nconst ManualInput = ({onCompare}: ManualInputPrefs): React.ReactElement => {\n  const [inputLeft, setInputLeft] = useState('')\n  const [inputRight, setInputRight] = useState('')\n\n  return (\n    <div className=\"ManualInput\">\n      <div className=\"inputs\">\n        <SingleInput onChange={setInputLeft} />\n        <SingleInput onChange={setInputRight} />\n      </div>\n      <div className=\"action\">\n        <div className=\"compare\" onClick={() => onCompare(inputLeft, inputRight)}>\n          Compare\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ManualInput\n","import _ from 'lodash'\n\ninterface SuccessfulSafeJsonParse {\n  status: 'ok'\n  json: ReturnType<JSON['parse']>\n}\n\ninterface FailedSafeJsonParse {\n  status: 'error'\n  message: string\n}\n\nconst safeJsonParse = (s: string): SuccessfulSafeJsonParse | FailedSafeJsonParse => {\n  try {\n    const json = JSON.parse(s)\n    return {status: 'ok', json}\n  } catch (error) {\n    if (error instanceof SyntaxError) {\n      return {status: 'error', message: error.message}\n    }\n    throw error\n  }\n}\n\nexport interface KeyedValue {\n  key: string\n}\n\nexport interface BothValue {\n  comparedType: 'both'\n  key?: string\n  typedValue: JsonTypedValue\n}\n\nexport interface LeftValue {\n  comparedType: 'left'\n  key?: string\n  typedValue: JsonTypedValue\n}\n\nexport interface RightValue {\n  comparedType: 'right'\n  key?: string\n  typedValue: JsonTypedValue\n}\n\nexport type ComparedValue = BothValue | LeftValue | RightValue\n\nexport const createBothValue = (typedValue: JsonTypedValue): BothValue => ({\n  comparedType: 'both',\n  typedValue,\n})\n\nexport const addKey =\n  <T extends ComparedValue>(converter: (_: JsonTypedValue) => T) =>\n  ([key, typedValue]: [string, JsonTypedValue]): T & KeyedValue => ({...converter(typedValue), key})\n\nexport const createLeftValue = (typedValue: JsonTypedValue): LeftValue => ({\n  comparedType: 'left',\n  typedValue,\n})\n\nexport const createRightValue = (typedValue: JsonTypedValue): RightValue => ({\n  comparedType: 'right',\n  typedValue,\n})\n\ninterface ComparedValues {\n  isSame: boolean\n  comparedValues: ComparedValue[]\n}\n\ninterface ComparedKeyedValues {\n  isSame: boolean\n  comparedValues: (ComparedValue & KeyedValue)[]\n}\n\ninterface ComparedJson extends ComparedValues {\n  comparedValues: [BothValue] | [LeftValue, RightValue]\n}\n\nexport interface SuccessfulCompare {\n  status: 'ok'\n  leftJson: ReturnType<JSON['parse']>\n  rightJson: ReturnType<JSON['parse']>\n  result: ComparedJson\n}\n\nexport interface FailedCompare {\n  status: 'error'\n  left: string\n  right: string\n  leftMessage?: string\n  rightMessage?: string\n}\n\nexport type CompareResult = SuccessfulCompare | FailedCompare\n\nconst tupleArray = (...v: string[]): string[] => v\n\nconst JSON_VALUE_PRIMITIVE_TYPES = ['number', 'string', 'boolean', 'null'] as const\nconst JSON_VALUE_PRIMITIVE_TYPES_INFERED = tupleArray(...JSON_VALUE_PRIMITIVE_TYPES)\n\nexport interface JsonTypedNullValue {\n  type: 'null'\n  value: null\n}\n\nexport interface JsonTypedNumberValue {\n  type: 'number'\n  value: number\n}\n\nexport interface JsonTypedStringValue {\n  type: 'string'\n  value: string\n}\n\nexport interface JsonTypedBooleanValue {\n  type: 'boolean'\n  value: boolean\n}\n\nexport interface JsonTypedArrayValue {\n  type: 'array'\n  value: ComparedValues\n}\n\nexport interface JsonTypedObjectValue {\n  type: 'object'\n  value: ComparedKeyedValues\n}\n\ninterface JsonTypedRawArrayValue {\n  type: 'raw-array'\n  value: unknown[]\n}\n\ninterface JsonTypedRawObjectValue {\n  type: 'raw-object'\n  value: Record<string, unknown>\n}\n\nexport interface JsonTypedLazyValue {\n  type: 'lazy'\n  value: JsonTypedRawArrayValue | JsonTypedRawObjectValue\n}\n\nexport type JsonTypedValue =\n  | JsonTypedNullValue\n  | JsonTypedNumberValue\n  | JsonTypedStringValue\n  | JsonTypedBooleanValue\n  | JsonTypedArrayValue\n  | JsonTypedObjectValue\n  | JsonTypedLazyValue\n\nexport type JsonTypedRawValue =\n  | JsonTypedNullValue\n  | JsonTypedNumberValue\n  | JsonTypedStringValue\n  | JsonTypedBooleanValue\n  | JsonTypedRawArrayValue\n  | JsonTypedRawObjectValue\n\nconst addRawType = (value: unknown): JsonTypedRawValue => {\n  if (value === null) return {type: 'null', value: null}\n  if (typeof value === 'number') return {type: 'number', value}\n  if (typeof value === 'string') return {type: 'string', value}\n  if (typeof value === 'boolean') return {type: 'boolean', value}\n  if (_.isArray(value)) return {type: 'raw-array', value}\n  if (_.isPlainObject(value)) return {type: 'raw-object', value: value as Record<string, unknown>}\n  throw Error('Unexpected type...')\n}\n\nconst isPrimitiveType = (\n  v: JsonTypedRawValue,\n): v is JsonTypedNullValue | JsonTypedNumberValue | JsonTypedStringValue | JsonTypedBooleanValue =>\n  JSON_VALUE_PRIMITIVE_TYPES_INFERED.includes(v.type)\n\nconst arrayToComparedValues = <T extends ComparedValue>(\n  array: unknown[],\n  converter: (_: JsonTypedValue) => T,\n): T[] => array.map(addRawType).map(convertToTypedValue).map(converter)\n\nconst arrayToComparedKeyValues = <T extends ComparedValue>(\n  array: Array<[string, unknown]>,\n  converter: (_: JsonTypedValue) => T,\n): (T & KeyedValue)[] =>\n  array\n    .map(([k, v]): [string, JsonTypedRawValue] => [k, addRawType(v)])\n    .map(([k, v]): [string, JsonTypedValue] => [k, convertToTypedValue(v)])\n    .map(addKey(converter))\n\nconst getCompareArraysNextRightArray = (\n  rightArray: unknown[],\n  comparedType: BothValue['comparedType'] | LeftValue['comparedType'],\n): unknown[] => {\n  switch (comparedType) {\n    case 'both':\n      return rightArray.slice(1)\n    case 'left':\n      return rightArray\n  }\n}\n\nconst compareArrays = (\n  leftArray: unknown[],\n  rightArray: unknown[],\n  isSame = true,\n  values: ComparedValue[] = [],\n): JsonTypedArrayValue => {\n  if (leftArray.length === 0) {\n    return {\n      type: 'array',\n      value: {\n        isSame: isSame && rightArray.length === 0,\n        comparedValues: [...values, ...arrayToComparedValues(rightArray, createRightValue)],\n      },\n    }\n  }\n\n  if (rightArray.length === 0) {\n    return {\n      type: 'array',\n      value: {\n        isSame: false,\n        comparedValues: [...values, ...arrayToComparedValues(leftArray, createLeftValue)],\n      },\n    }\n  }\n\n  const leftTypedValue = addRawType(leftArray[0])\n  const rightTypedValue = addRawType(rightArray[0])\n\n  const c = compareValues(leftTypedValue, rightTypedValue)\n\n  const [firstComparedValue] = c.comparedValues\n\n  const nextRightArray = getCompareArraysNextRightArray(rightArray, firstComparedValue.comparedType)\n\n  return compareArrays(leftArray.slice(1), nextRightArray, isSame && c.isSame, [\n    ...values,\n    firstComparedValue,\n  ])\n}\n\nconst compareKeyedArrays = (\n  leftKeyedArray: Array<[string, unknown]>,\n  rightKeyedArray: Array<[string, unknown]>,\n  isSame = true,\n  values: (ComparedValue & KeyedValue)[] = [],\n): JsonTypedObjectValue => {\n  if (leftKeyedArray.length === 0) {\n    return {\n      type: 'object',\n      value: {\n        isSame: isSame && rightKeyedArray.length === 0,\n        comparedValues: [...values, ...arrayToComparedKeyValues(rightKeyedArray, createRightValue)],\n      },\n    }\n  }\n\n  if (rightKeyedArray.length === 0) {\n    return {\n      type: 'object',\n      value: {\n        isSame: false,\n        comparedValues: [...values, ...arrayToComparedKeyValues(leftKeyedArray, createLeftValue)],\n      },\n    }\n  }\n\n  const [leftKey, leftValue] = leftKeyedArray[0]\n  const [rightKey, rightValue] = rightKeyedArray[0]\n\n  const leftTypedValue = addRawType(leftValue)\n  const rightTypedValue = addRawType(rightValue)\n\n  if (leftKey !== rightKey) {\n    const [nextLeftKeyedArray, nextRightKeyedArray, thisValue]: [\n      Array<[string, unknown]>,\n      Array<[string, unknown]>,\n      ComparedValue & KeyedValue,\n    ] =\n      leftKey < rightKey\n        ? [\n            leftKeyedArray.slice(1),\n            rightKeyedArray,\n            addKey(createLeftValue)([leftKey, convertToTypedValue(leftTypedValue)]),\n          ]\n        : [\n            leftKeyedArray,\n            rightKeyedArray.slice(1),\n            addKey(createRightValue)([rightKey, convertToTypedValue(rightTypedValue)]),\n          ]\n    return compareKeyedArrays(nextLeftKeyedArray, nextRightKeyedArray, false, [\n      ...values,\n      thisValue,\n    ])\n  }\n\n  const compareResult = compareValues(leftTypedValue, rightTypedValue)\n  const comparedValues: ComparedValue[] = compareResult.comparedValues\n\n  return compareKeyedArrays(\n    leftKeyedArray.slice(1),\n    rightKeyedArray.slice(1),\n    isSame && compareResult.isSame,\n    [...values, ...comparedValues.map((cv): ComparedValue & KeyedValue => ({...cv, key: leftKey}))],\n  )\n}\n\nconst compareObjects = (\n  leftObject: Record<string, unknown>,\n  rightObject: Record<string, unknown>,\n): JsonTypedObjectValue => {\n  const leftKeyArray = _.sortBy(_.toPairs(leftObject), ([k, _]) => k)\n  const rightKeyArray = _.sortBy(_.toPairs(rightObject), ([k, _]) => k)\n\n  return compareKeyedArrays(leftKeyArray, rightKeyArray)\n}\n\nconst convertToTypedValue = (rawTypedValue: JsonTypedRawValue): JsonTypedValue =>\n  isPrimitiveType(rawTypedValue) ? rawTypedValue : {type: 'lazy', value: rawTypedValue}\n\nconst compareValues = (\n  rawTypedLeftJson: JsonTypedRawValue,\n  rawTypedRightJson: JsonTypedRawValue,\n  _path: Array<string | number> = [],\n): ComparedJson => {\n  if (rawTypedLeftJson.type === rawTypedRightJson.type) {\n    if (isPrimitiveType(rawTypedLeftJson)) {\n      if (rawTypedLeftJson.value === rawTypedRightJson.value) {\n        return {\n          isSame: true,\n          comparedValues: [createBothValue(rawTypedLeftJson)],\n        }\n      } else {\n        return {\n          isSame: false,\n          comparedValues: [\n            createLeftValue(rawTypedLeftJson),\n            createRightValue(convertToTypedValue(rawTypedRightJson)),\n          ],\n        }\n      }\n    }\n\n    if (rawTypedLeftJson.type === 'raw-array' && rawTypedRightJson.type === 'raw-array') {\n      const typedArray = compareArrays(rawTypedLeftJson.value, rawTypedRightJson.value)\n      return {\n        isSame: typedArray.value.isSame,\n        comparedValues: [createBothValue(typedArray)],\n      }\n    }\n\n    if (rawTypedLeftJson.type === 'raw-object' && rawTypedRightJson.type === 'raw-object') {\n      const typedObject = compareObjects(rawTypedLeftJson.value, rawTypedRightJson.value)\n      return {\n        isSame: typedObject.value.isSame,\n        comparedValues: [createBothValue(typedObject)],\n      }\n    }\n  }\n\n  return {\n    isSame: false,\n    comparedValues: [\n      createLeftValue(convertToTypedValue(rawTypedLeftJson)),\n      createRightValue(convertToTypedValue(rawTypedRightJson)),\n    ],\n  }\n}\n\nexport const compareJsons = (left: string, right: string): CompareResult => {\n  const leftParsed = safeJsonParse(left)\n  const rightParsed = safeJsonParse(right)\n\n  if (leftParsed.status === 'error' || rightParsed.status === 'error') {\n    return {\n      status: 'error',\n      left,\n      right,\n      leftMessage: leftParsed.status === 'error' ? leftParsed.message : undefined,\n      rightMessage: rightParsed.status === 'error' ? rightParsed.message : undefined,\n    }\n  }\n\n  const leftJson = leftParsed.json\n  const rightJson = rightParsed.json\n\n  return {\n    status: 'ok',\n    leftJson,\n    rightJson,\n    result: compareValues(addRawType(leftJson), addRawType(rightJson)),\n  }\n}\n\nexport const expandLazyValue = (\n  typedRawValue: JsonTypedRawArrayValue | JsonTypedRawObjectValue,\n): JsonTypedArrayValue | JsonTypedObjectValue => {\n  switch (typedRawValue.type) {\n    case 'raw-array':\n      return {\n        type: 'array',\n        value: {\n          isSame: true,\n          comparedValues: arrayToComparedValues(typedRawValue.value, createBothValue),\n        },\n      }\n    case 'raw-object':\n      return {\n        type: 'object',\n        value: {\n          isSame: true,\n          comparedValues: arrayToComparedKeyValues(_.toPairs(typedRawValue.value), createBothValue),\n        },\n      }\n  }\n}\n","import React, {useState} from 'react'\nimport _ from 'lodash'\nimport clsx from 'clsx'\nimport {\n  FailedCompare,\n  compareJsons,\n  ComparedValue,\n  JsonTypedValue,\n  JsonTypedArrayValue,\n  JsonTypedObjectValue,\n  JsonTypedStringValue,\n  JsonTypedNullValue,\n  JsonTypedBooleanValue,\n  JsonTypedNumberValue,\n  JsonTypedLazyValue,\n  expandLazyValue,\n} from '../utils'\nimport './DisplayDifference.scss'\n\nconst ENCLOSING_TAGS: Record<'array' | 'object', [string, string]> = {\n  array: ['[', ']'],\n  object: ['{', '}'],\n}\n\nconst INDENTATION_SIZE = 2 as const\nconst INDENTATION_IN_SPACES = _.range(INDENTATION_SIZE)\n  .map(() => ' ')\n  .join('')\n\nconst increaseIndentation = (s = ''): string => `${INDENTATION_IN_SPACES}${s}`\n\nconst isComplexType = (v: JsonTypedValue): v is JsonTypedArrayValue | JsonTypedObjectValue =>\n  v.type === 'array' || v.type === 'object'\ninterface DisplayValuePrefs<T> extends SharedPrefs {\n  typedValue: T\n}\n\ninterface DisplayDifferencePrefs {\n  comparator: ReturnType<typeof compareJsons>\n}\n\ninterface SharedPrefs {\n  indentation?: string\n  prefix?: string\n  suffix?: string\n  collapse?: boolean\n}\n\ninterface DisplayComparedValuePrefs extends SharedPrefs {\n  comparedValue: ComparedValue\n}\n\ninterface DisplayComparedValuesPrefs extends SharedPrefs {\n  comparedValues: ComparedValue[]\n}\n\nconst DisplayError = ({\n  failedCompare: {leftMessage, rightMessage},\n}: {\n  failedCompare: FailedCompare\n}): React.ReactElement => (\n  <div className=\"DisplayDifference DisplayError\">\n    {leftMessage && <pre>Could not parse left input: {leftMessage}</pre>}\n    {rightMessage && <pre>Could not parse right input: {rightMessage}</pre>}\n  </div>\n)\n\nconst DisplaySimpleValue = ({\n  typedValue: {value},\n  indentation,\n  prefix,\n  suffix,\n}: DisplayValuePrefs<\n  JsonTypedNullValue | JsonTypedBooleanValue | JsonTypedNumberValue | JsonTypedStringValue\n>): React.ReactElement => (\n  <pre>\n    {indentation}\n    {prefix ? `${JSON.stringify(prefix)}: ` : ''}\n    {JSON.stringify(value)}\n    {suffix}\n  </pre>\n)\n\nconst DisplayComplexValue = ({\n  typedValue: {\n    type,\n    value: {isSame, comparedValues},\n  },\n  collapse = true,\n  indentation,\n  prefix,\n  suffix,\n}: DisplayValuePrefs<JsonTypedArrayValue | JsonTypedObjectValue>): React.ReactElement => {\n  const [isCollapsed, setCollapsed] = useState(collapse)\n  const [startTag, endTag] = ENCLOSING_TAGS[type]\n  const prefixToUse = prefix ? `${JSON.stringify(prefix)}: ` : ''\n\n  if (comparedValues.length === 0) {\n    return (\n      <pre>\n        {indentation}\n        {prefixToUse}\n        {startTag}\n        {endTag}\n      </pre>\n    )\n  }\n\n  if (isCollapsed) {\n    return (\n      <div className={clsx('collapsable', {mixed: !isSame})} onClick={() => setCollapsed(false)}>\n        <pre>\n          {indentation}\n          {prefixToUse}\n          {startTag}\n          ..\n          {endTag}\n        </pre>\n      </div>\n    )\n  }\n\n  return (\n    <>\n      <div className=\"collapsable\" onClick={() => setCollapsed(true)}>\n        <pre>\n          {indentation}\n          {prefixToUse}\n          {startTag}\n        </pre>\n      </div>\n      <DisplayComparedValues\n        comparedValues={comparedValues}\n        indentation={increaseIndentation(indentation)}\n      />\n      <pre>\n        {indentation}\n        {endTag}\n        {suffix}\n      </pre>\n    </>\n  )\n}\n\nconst DisplayLazyValue = ({\n  typedValue: {value},\n  ...rest\n}: DisplayValuePrefs<JsonTypedLazyValue>): React.ReactElement => {\n  return <DisplayComplexValue typedValue={expandLazyValue(value)} {...rest} />\n}\n\nconst DisplayComparedValue = ({\n  comparedValue: {comparedType, typedValue},\n  ...rest\n}: DisplayComparedValuePrefs): React.ReactElement => {\n  const getDisplayTypedValue = (typedValue: JsonTypedValue): React.ReactElement => {\n    if (isComplexType(typedValue)) {\n      return <DisplayComplexValue typedValue={typedValue} {...rest} />\n    } else if (typedValue.type === 'lazy') {\n      return <DisplayLazyValue typedValue={typedValue} {...rest} />\n    } else {\n      return <DisplaySimpleValue typedValue={typedValue} {...rest} />\n    }\n  }\n\n  return (\n    <div className={clsx('ComparedValue', comparedType)}>{getDisplayTypedValue(typedValue)}</div>\n  )\n}\n\nconst DisplayComparedValues = ({\n  comparedValues,\n  indentation,\n  collapse = true,\n}: DisplayComparedValuesPrefs): React.ReactElement => {\n  return (\n    <div className=\"ComparedValues\">\n      {comparedValues.map((cv, i) => {\n        const key = i // todo, we need to use something better\n        const nextPrefix = cv.key\n        const nextSuffix = i < comparedValues.length - 1 ? ',' : ''\n        return (\n          <DisplayComparedValue\n            key={key}\n            comparedValue={cv}\n            prefix={nextPrefix}\n            suffix={nextSuffix}\n            indentation={indentation}\n            collapse={collapse}\n          />\n        )\n      })}\n    </div>\n  )\n}\n\nconst DisplayDifference = ({comparator}: DisplayDifferencePrefs): React.ReactElement => {\n  if (comparator.status === 'error') return <DisplayError failedCompare={comparator} />\n  const {\n    result: {comparedValues},\n  } = comparator\n  return <DisplayComparedValues comparedValues={comparedValues} collapse={false} />\n}\n\nexport default DisplayDifference\n","import React, {useState} from 'react'\nimport ManualInput from './components/ManualInput'\nimport DisplayDifference from './components/DisplayDifference'\nimport {compareJsons} from './utils'\nimport './App.scss'\n\nconst App = (): React.ReactElement => {\n  const [comparator, setComparator] = useState<ReturnType<typeof compareJsons> | undefined>()\n\n  return (\n    <div className=\"App\">\n      <h1>Semantic JSON compare</h1>\n      <ManualInput onCompare={(left, right) => setComparator(compareJsons(left, right))} />\n      {comparator && <DisplayDifference comparator={comparator} />}\n    </div>\n  )\n}\n\nexport default App\n","import {ReportHandler} from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport './index.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}