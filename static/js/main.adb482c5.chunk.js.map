{"version":3,"sources":["components/ManualInput.tsx","components/DisplayDifference.tsx","utils.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SingleInput","onChange","className","e","target","value","ManualInput","onCompare","useState","inputLeft","setInputLeft","inputRight","setInputRight","onClick","ENCLOSING_TAGS","simple","array","object","INDENTATION_IN_SPACES","_","range","map","join","DisplayError","failedCompare","leftMessage","rightMessage","stringifyWithIndentation","v","indentation","JSON","stringify","replaceAll","DisplayValue","prefix","suffix","type","clsx","DisplayResult","result","isSame","values","collapse","collapsed","setCollapsed","fullPrefix","nextIndentation","s","addIndentation","startTag","endTag","length","differ","i","nextPrefix","key","nextSuffix","DisplayDifference","comparator","status","safeJsonParse","json","parse","error","SyntaxError","message","JSON_VALUE_PRIMITIVE_TYPES_INFERED","addType","isArray","isPlainObject","Error","isPrimitiveType","includes","toLeftRightValues","a","compareArrays","leftArray","rightArray","leftTypedValue","rightTypedValue","c","compareValues","slice","toLeftRightKeyValues","compareKeyedArrays","leftKeyedArray","rightKeyedArray","leftKey","leftValue","rightKey","rightValue","nextLeftKeyedArray","nextRightKeyArray","thisValue","compareObjects","leftObject","rightObject","leftKeyArray","sortBy","toPairs","k","rightKeyArray","typedLeftJson","typedRightJson","App","setComparator","left","right","leftParsed","rightParsed","undefined","leftJson","rightJson","compareJsons","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.adb482c5.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport './ManualInput.scss'\n\ninterface SingleInputPrefs {\n  onChange: (newValue: string) => void\n}\n\nconst SingleInput = ({onChange}: SingleInputPrefs): React.ReactElement => (\n  <div className=\"SingleInput\">\n    <textarea className=\"textarea\" onChange={(e) => onChange(e.target.value)} />\n  </div>\n)\n\ninterface ManualInputPrefs {\n  onCompare: (left: string, right: string) => void\n}\n\nconst ManualInput = ({onCompare}: ManualInputPrefs): React.ReactElement => {\n  const [inputLeft, setInputLeft] = useState('')\n  const [inputRight, setInputRight] = useState('')\n\n  return (\n    <div className=\"ManualInput\">\n      <div className=\"inputs\">\n        <SingleInput onChange={setInputLeft} />\n        <SingleInput onChange={setInputRight} />\n      </div>\n      <div className=\"action\">\n        <div className=\"compare\" onClick={() => onCompare(inputLeft, inputRight)}>\n          Compare\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ManualInput\n","import React, {useState} from 'react'\nimport _ from 'lodash'\nimport clsx from 'clsx'\nimport {compareJsons, FailedCompare, JsonCompareResult, SimpleValue} from '../utils'\nimport './DisplayDifference.scss'\n\nconst ENCLOSING_TAGS: Record<'simple' | 'array' | 'object', [string, string]> = {\n  simple: ['', ''],\n  array: ['[', ']'],\n  object: ['{', '}'],\n}\n\nconst INDENTATION_SIZE = 2 as const\nconst INDENTATION_IN_SPACES = _.range(INDENTATION_SIZE)\n  .map(() => ' ')\n  .join('')\n\nconst addIndentation = (s = ''): string => `${INDENTATION_IN_SPACES}${s}`\n\ninterface DisplayDifferencePrefs {\n  comparator: ReturnType<typeof compareJsons>\n}\n\nconst DisplayError = ({\n  failedCompare: {leftMessage, rightMessage},\n}: {\n  failedCompare: FailedCompare\n}): React.ReactElement => (\n  <div className=\"DisplayDifference DisplayError\">\n    {leftMessage && <pre>Could not parse left input: {leftMessage}</pre>}\n    {rightMessage && <pre>Could not parse right input: {rightMessage}</pre>}\n  </div>\n)\n\ninterface PrefixValue {\n  indentation?: string\n  prefix?: string\n  suffix?: string\n}\n\nconst stringifyWithIndentation = (v: unknown, indentation = ''): string =>\n  JSON.stringify(v, null, INDENTATION_SIZE).replaceAll('\\n', `\\n${indentation}`)\n\nconst DisplayValue = ({\n  indentation = '',\n  prefix,\n  suffix,\n  value: {type, value},\n}: {value: SimpleValue} & PrefixValue): React.ReactElement => (\n  <div className={clsx('DisplayValue', type)}>\n    <pre>\n      {indentation}\n      {prefix ? `${JSON.stringify(prefix)}: ` : ''}\n      {stringifyWithIndentation(value, indentation)}\n      {suffix}\n    </pre>\n  </div>\n)\n\ninterface DisplayResultPrefs extends PrefixValue {\n  result: JsonCompareResult\n  collapse?: boolean\n}\n\nconst DisplayResult = ({\n  result: {type, isSame, values},\n  collapse = false,\n  indentation = '',\n  prefix,\n  suffix,\n}: DisplayResultPrefs): React.ReactElement => {\n  const [collapsed, setCollapsed] = useState(collapse)\n  const fullPrefix = `${indentation}${prefix != null ? `${JSON.stringify(prefix)}: ` : ''}`\n  const nextIndentation = type === 'simple' ? indentation : addIndentation(indentation)\n  const [startTag, endTag] = ENCLOSING_TAGS[type]\n\n  if (values.length === 0)\n    return (\n      <div className=\"DisplayResult\">\n        <pre>\n          {fullPrefix}\n          {startTag}\n          {endTag}\n          {suffix}\n        </pre>\n      </div>\n    )\n  if (collapsed)\n    return (\n      <div\n        className={clsx('DisplayResult', 'collapsed', {differ: !isSame})}\n        onClick={() => setCollapsed(false)}\n      >\n        <pre>\n          {fullPrefix}\n          {startTag}...{endTag}\n          {suffix}\n        </pre>\n      </div>\n    )\n\n  return (\n    <div className=\"DisplayResult\">\n      <pre>\n        {fullPrefix}\n        {startTag}\n      </pre>\n      {values.map((e, i) => {\n        const nextPrefix = e.key\n        const nextSuffix = i < values.length - 1 ? ',' : ''\n        return e.type === 'complex' ? (\n          <DisplayResult\n            key={i}\n            indentation={nextIndentation}\n            prefix={nextPrefix}\n            result={e.value}\n            suffix={nextSuffix}\n            collapse\n          />\n        ) : (\n          <DisplayValue\n            key={i}\n            indentation={nextIndentation}\n            prefix={nextPrefix}\n            value={e}\n            suffix={nextSuffix}\n          />\n        )\n      })}\n      <pre>\n        {indentation}\n        {endTag}\n        {suffix}\n      </pre>\n    </div>\n  )\n}\n\nconst DisplayDifference = ({comparator}: DisplayDifferencePrefs): React.ReactElement => {\n  if (comparator.status === 'error') return <DisplayError failedCompare={comparator} />\n  const {result} = comparator\n  return <DisplayResult result={result} />\n}\n\nexport default DisplayDifference\n","import _ from 'lodash'\n\ninterface SuccessfulSafeJsonParse {\n  status: 'ok'\n  json: ReturnType<JSON['parse']>\n}\n\ninterface FailedSafeJsonParse {\n  status: 'error'\n  message: string\n}\n\nconst safeJsonParse = (s: string): SuccessfulSafeJsonParse | FailedSafeJsonParse => {\n  try {\n    const json = JSON.parse(s)\n    return {status: 'ok', json}\n  } catch (error) {\n    if (error instanceof SyntaxError) {\n      return {status: 'error', message: error.message}\n    }\n    throw error\n  }\n}\n\ninterface LeftValue {\n  type: 'left'\n  key?: string\n  value: unknown\n}\n\ninterface BothValue {\n  type: 'both'\n  key?: string\n  value: null | string | number | boolean | JsonArray | JsonObject\n}\n\ninterface RightValue {\n  type: 'right'\n  key?: string\n  value: unknown\n}\n\ninterface ComplexValue {\n  type: 'complex'\n  key?: string\n  value: JsonArray | JsonObject\n}\n\nexport type SimpleValue = LeftValue | RightValue | BothValue\nexport type JsonValue = LeftValue | RightValue | BothValue | ComplexValue\n\ninterface JsonCompareValue {\n  type: 'simple' | 'array' | 'object'\n  isSame: boolean\n  values: Array<JsonValue>\n}\n\ninterface JsonSimple extends JsonCompareValue {\n  type: 'simple'\n}\n\ninterface JsonArray extends JsonCompareValue {\n  type: 'array'\n}\n\ninterface JsonObject extends JsonCompareValue {\n  type: 'object'\n}\n\nexport type JsonCompareResult = JsonSimple | JsonArray | JsonObject\n\nexport interface SuccessfulCompare {\n  status: 'ok'\n  leftJson: ReturnType<JSON['parse']>\n  rightJson: ReturnType<JSON['parse']>\n  result: JsonCompareResult\n}\n\nexport interface FailedCompare {\n  status: 'error'\n  left: string\n  right: string\n  leftMessage?: string\n  rightMessage?: string\n}\n\nexport type Compare = SuccessfulCompare | FailedCompare\n\nconst tupleArray = (...v: string[]): string[] => v\n\nconst JSON_VALUE_PRIMITIVE_TYPES = ['number', 'string', 'boolean', 'null'] as const\nconst JSON_VALUE_PRIMITIVE_TYPES_INFERED = tupleArray(...JSON_VALUE_PRIMITIVE_TYPES)\n// const JSON_VALUE_TYPES = ['array', 'object', ...JSON_VALUE_PRIMITIVE_TYPES] as const\n\ninterface JsonRawValueNull {\n  type: 'null'\n  value: null\n}\n\ninterface JsonRawValueString {\n  type: 'string'\n  value: string\n}\n\ninterface JsonRawValueNumber {\n  type: 'number'\n  value: number\n}\n\ninterface JsonRawValueBoolean {\n  type: 'boolean'\n  value: boolean\n}\n\ninterface JsonRawValueArray {\n  type: 'array'\n  value: unknown[]\n}\n\ninterface JsonRawValueObject {\n  type: 'object'\n  value: Record<string, unknown>\n}\n\ntype JsonRawValue =\n  | JsonRawValueNull\n  | JsonRawValueString\n  | JsonRawValueNumber\n  | JsonRawValueBoolean\n  | JsonRawValueArray\n  | JsonRawValueObject\n\nconst addType = (value: unknown): JsonRawValue => {\n  if (value === null) return {type: 'null', value: null}\n  if (typeof value === 'number') return {type: 'number', value}\n  if (typeof value === 'string') return {type: 'string', value}\n  if (typeof value === 'boolean') return {type: 'boolean', value}\n  if (_.isArray(value)) return {type: 'array', value}\n  if (_.isPlainObject(value)) return {type: 'object', value: value as Record<string, unknown>}\n  throw Error('Unexpected type...')\n}\n\nconst isPrimitiveType = (\n  v: JsonRawValue,\n): v is JsonRawValueNull | JsonRawValueString | JsonRawValueNumber | JsonRawValueBoolean =>\n  JSON_VALUE_PRIMITIVE_TYPES_INFERED.includes(v.type)\n\nconst toLeftRightValues = (a: unknown[], type: 'left' | 'right'): Array<LeftValue | RightValue> =>\n  a.map((value) => ({type, value}))\n\nconst compareArrays = (\n  leftArray: unknown[],\n  rightArray: unknown[],\n  isSame = true,\n  values: JsonArray['values'] = [],\n): JsonArray => {\n  if (leftArray.length === 0) {\n    return {\n      type: 'array',\n      isSame: isSame && rightArray.length === 0,\n      values: [...values, ...toLeftRightValues(rightArray, 'right')],\n    }\n  }\n\n  if (rightArray.length === 0) {\n    return {\n      type: 'array',\n      isSame: false,\n      values: [...values, ...toLeftRightValues(leftArray, 'left')],\n    }\n  }\n\n  const leftTypedValue = addType(leftArray[0])\n  const rightTypedValue = addType(rightArray[0])\n\n  const c = compareValues(leftTypedValue, rightTypedValue)\n\n  switch (c.type) {\n    case 'array':\n    case 'object':\n      return compareArrays(leftArray.slice(1), rightArray.slice(1), isSame && c.isSame, [\n        ...values,\n        {type: 'complex', value: c},\n      ])\n    case 'simple':\n      return c.isSame\n        ? compareArrays(leftArray.slice(1), rightArray.slice(1), isSame, [...values, ...c.values])\n        : compareArrays(leftArray.slice(1), rightArray, false, [...values, c.values[0]])\n  }\n}\n\nconst toLeftRightKeyValues = (\n  a: Array<[string, unknown]>,\n  type: 'left' | 'right',\n): Array<LeftValue | RightValue> => a.map(([key, value]) => ({type, key, value}))\n\nconst compareKeyedArrays = (\n  leftKeyedArray: Array<[string, unknown]>,\n  rightKeyedArray: Array<[string, unknown]>,\n  isSame = true,\n  values: JsonObject['values'] = [],\n): JsonObject => {\n  if (leftKeyedArray.length === 0) {\n    return {\n      type: 'object',\n      isSame: isSame && rightKeyedArray.length === 0,\n      values: [...values, ...toLeftRightKeyValues(rightKeyedArray, 'right')],\n    }\n  }\n\n  if (rightKeyedArray.length === 0) {\n    return {\n      type: 'object',\n      isSame: false,\n      values: [...values, ...toLeftRightKeyValues(leftKeyedArray, 'left')],\n    }\n  }\n\n  const [leftKey, leftValue] = leftKeyedArray[0]\n  const [rightKey, rightValue] = rightKeyedArray[0]\n\n  if (leftKey !== rightKey) {\n    const [nextLeftKeyedArray, nextRightKeyArray, thisValue]: [Array<[string, unknown]>, Array<[string, unknown]>, LeftValue | RightValue] = leftKey < rightKey\n      ? [leftKeyedArray.slice(1), rightKeyedArray, { type: 'left', key: leftKey, value: leftValue }]\n      : [leftKeyedArray, rightKeyedArray.slice(1), { type: 'right', key: rightKey, value: rightValue }]\n    return compareKeyedArrays(nextLeftKeyedArray, nextRightKeyArray, false, [...values, thisValue])\n  }\n\n  const leftTypedValue = addType(leftValue)\n  const rightTypedValue = addType(rightValue)\n\n  const c = compareValues(leftTypedValue, rightTypedValue)\n\n  switch (c.type) {\n    case 'array':\n    case 'object':\n      return compareKeyedArrays(leftKeyedArray.slice(1), rightKeyedArray.slice(1), isSame && c.isSame, [\n        ...values,\n        {type: 'complex', key: leftKey, value: c},\n      ])\n    case 'simple':\n      return compareKeyedArrays(leftKeyedArray.slice(1), rightKeyedArray.slice(1), isSame && c.isSame, [\n          ...values,\n          ...c.values.map((v) => ({key: leftKey, ...v})),\n        ])\n  }\n}\n\nconst compareObjects = (\n  leftObject: Record<string, unknown>,\n  rightObject: Record<string, unknown>,\n): JsonObject => {\n  const leftKeyArray = _.sortBy(_.toPairs(leftObject), ([k, _]) => k)\n  const rightKeyArray = _.sortBy(_.toPairs(rightObject), ([k, _]) => k)\n\n  return compareKeyedArrays(leftKeyArray, rightKeyArray)\n}\n\nconst compareValues = (\n  typedLeftJson: JsonRawValue,\n  typedRightJson: JsonRawValue,\n  _path: Array<string | number> = [],\n): JsonCompareResult => {\n  if (typedLeftJson.type === typedRightJson.type) {\n    if (isPrimitiveType(typedLeftJson)) {\n      if (typedLeftJson.value === typedRightJson.value) {\n        return {\n          type: 'simple',\n          isSame: true,\n          values: [\n            {\n              type: 'both',\n              value: typedLeftJson.value,\n            },\n          ],\n        }\n      } else {\n        return {\n          type: 'simple',\n          isSame: false,\n          values: [\n            {\n              type: 'left',\n              value: typedLeftJson.value,\n            },\n            {\n              type: 'right',\n              value: typedRightJson.value,\n            },\n          ],\n        }\n      }\n    }\n\n    if (typedLeftJson.type === 'array' && typedRightJson.type === 'array') {\n      return compareArrays(typedLeftJson.value, typedRightJson.value)\n    }\n\n    if (typedLeftJson.type === 'object' && typedRightJson.type === 'object') {\n      return compareObjects(typedLeftJson.value, typedRightJson.value)\n    }\n  }\n\n  return {\n    type: 'simple',\n    isSame: false,\n    values: [\n      {\n        type: 'left',\n        value: typedLeftJson.value,\n      },\n      {\n        type: 'right',\n        value: typedRightJson.value,\n      },\n    ],\n  }\n}\n\nexport const compareJsons = (left: string, right: string): Compare => {\n  const leftParsed = safeJsonParse(left)\n  const rightParsed = safeJsonParse(right)\n\n  if (leftParsed.status === 'error' || rightParsed.status === 'error') {\n    return {\n      status: 'error',\n      left,\n      right,\n      leftMessage: leftParsed.status === 'error' ? leftParsed.message : undefined,\n      rightMessage: rightParsed.status === 'error' ? rightParsed.message : undefined,\n    }\n  }\n\n  const leftJson = leftParsed.json\n  const rightJson = rightParsed.json\n\n  return {\n    status: 'ok',\n    leftJson,\n    rightJson,\n    result: compareValues(addType(leftJson), addType(rightJson)),\n  }\n}\n","import React, {useState} from 'react'\nimport ManualInput from './components/ManualInput'\nimport DisplayDifference from './components/DisplayDifference'\nimport {compareJsons} from './utils'\nimport './App.scss'\n\nconst App = (): React.ReactElement => {\n  const [comparator, setComparator] = useState<ReturnType<typeof compareJsons> | undefined>()\n\n  return (\n    <div className=\"App\">\n      <h1>Semantic JSON compare</h1>\n      <ManualInput onCompare={(left, right) => setComparator(compareJsons(left, right))} />\n      {comparator && <DisplayDifference comparator={comparator} />}\n    </div>\n  )\n}\n\nexport default App\n","import {ReportHandler} from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport './index.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}